{{comment .copyright}}
{{if .license}}{{comment .license}}{{end}}
package cmd

import (
	"fmt"
	"os"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/gofunct/gogen/gocloud"
	"github.com/gofunct/common/logging"
)

var (
    cfgFile string
    config = viper.New()
    )

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "temp",
	Short: "A brief description of your application",
	Long: `A longer description that spans multiple lines and likely contains
examples and usage of using your application. For example:

Stencil is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Stencil application.`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	//	Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)
	logging.AddFlags(rootCmd)
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.temp.yaml)")
	rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
	rootCmd.AddCommand(gocloud.NewGocloudCommand)
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	config.AutomaticEnv()
	if cfgFile != "" {
		// Use config file from the flag.
		config.SetConfigFile(cfgFile)
	} else {
		config.AddConfigPath(".")
        config.SetConfigName("config")

	}

	// If a config file is found, read it in.
	if err := config.ReadInConfig(); err == nil {
		fmt.Println("Using config file:", viper.ConfigFileUsed())
	}
}
