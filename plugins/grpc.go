package plugins

import (
	"time"

	"github.com/jessevdk/go-assets"
)

var _Grpc8ab520538275a262d907b67ec7a5db4941054457 = "syntax = \"proto3\";\npackage echopb;\n\nimport \"google/api/annotations.proto\";\n\nmessage EchoMessage {\n string value = 1;\n}\n\nservice EchoService {\n  rpc Echo(EchoMessage) returns (EchoMessage) {\n    option (google.api.http) = {\n      post: \"/v1/echo\"\n      body: \"*\"\n    };\n  }\n}"
var _Grpc3c27ca5ff6a68261c9914fe7302b83f4a351481e = "// Code generated by github.com/gofunct/common/proto/service. DO NOT EDIT.\n\npackage {{.Go.Package }}\n\nimport (\n\t\"context\"\n\n\t\"github.com/grpc-ecosystem/grpc-gateway/runtime\"\n\t\"google.golang.org/grpc\"\n\n\t{{.PbGo.PackageName}} \"{{ .PbGo.PackagePath }}\"\n)\n\n// RegisterWithServer implements runtime.Server.RegisterWithServer.\nfunc (s *{{.Go.StructName}}) RegisterWithServer(grpcSvr *grpc.Server) {\n\t{{.PbGo.PackageName}}.Register{{.Go.ServerName}}(grpcSvr, s)\n}\n\n// RegisterWithHandler implements runtime.Server.RegisterWithHandler.\nfunc (s *{{.Go.StructName}}) RegisterWithHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {\n\treturn {{.PbGo.PackageName}}.Register{{.ServiceName}}ServiceHandler(ctx, mux, conn)\n}\n"
var _Grpc5f4232d8066e4368ff87f1202228b4f354cb75b8 = "// Copyright Â© 2019\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n\t\"{{ .importPath }}/server\"\n)\n\nfunc init() {\n\trootCmd.AddCommand(runCmd)\n}\n\n// runCmd represents the run command\nvar runCmd = &cobra.Command{\n\tUse:   \"run\",\n\tShort: \"start a grpc server\",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n        return server.Run()\n\t},\n}\n"
var _Grpc26e1640f4a9d81e76bb775587829ad76a8820dd5 = "package {{.Go.Package }}\n{{if .Methods}}\nimport (\n\t\"context\"\n\t\"testing\"\n{{range .Go.TestImports}}\n\t\"{{.}}\"\n{{- end}}\n\n\t{{.PbGo.PackageName}} \"{{ .PbGo.PackagePath }}\"\n)\n{{$go := .Go -}}\n{{$pbGo := .PbGo -}}\n{{- range .Methods}}\nfunc Test_{{$go.ServerName}}_{{.Method}}(t *testing.T) {\n\tsvr := New{{$go.ServerName}}()\n\n\tctx := context.Background()\n\treq := &{{.RequestGo $pbGo.PackageName}}{}\n\n\tresp, err := svr.{{.Method}}(ctx, req)\n\n\tif err != nil {\n\t\tt.Errorf(\"returned an error %v\", err)\n\t}\n\n\tif resp == nil {\n\t\tt.Error(\"response should not nil\")\n\t}\n}\n{{end -}}\n{{end -}}\n"
var _Grpc678d6b66ec0a41c76bf1f1c51d736c9ddf327e49 = "package {{.Go.Package }}\n\nimport (\n\t\"context\"\n{{range .Go.Imports}}\n\t\"{{.}}\"\n{{- end}}\n\n\t{{.PbGo.PackageName}} \"{{ .PbGo.PackagePath }}\"\n)\n\n// {{.Go.ServerName}} is a composite interface of {{.PbGo.PackageName }}.{{.Go.ServerName}} and grapiserver.Server.\ntype {{.Go.ServerName}} interface {\n\t{{.PbGo.PackageName }}.{{.Go.ServerName}}\n\tgrapiserver.Server\n}\n\n// New{{.Go.ServerName}} creates a new {{.Go.ServerName}} instance.\nfunc New{{.Go.ServerName}}() {{.Go.ServerName}} {\n\treturn &{{.Go.StructName}}{}\n}\n\ntype {{.Go.StructName}} struct {\n}\n{{$go := .Go -}}\n{{$pbGo := .PbGo -}}\n{{- range .Methods}}\nfunc (s *{{$go.StructName}}) {{.Method}}(ctx context.Context, req *{{.RequestGo $pbGo.PackageName}}) (*{{.ResponseGo $pbGo.PackageName}}, error) {\n\t// TODO: Not yet implemented.\n\treturn nil, status.Error(codes.Unimplemented, \"TODO: You should implement it!\")\n}\n{{end -}}\n"
var _Grpcfc7a55a39318c54096c96e4c27fae2dfa0fff734 = "package server\n\nimport (\n\t\"os\"\n)\n\nfunc Run() error {\n\treturn Run()\n}\n"

// Grpc returns go-assets FileSystem
var Grpc = assets.NewFileSystem(map[string][]string{"/": []string{"register.go.tmpl", "server_test.go.tmpl", "server.go.tmpl", "run.go.tmpl"}, "/cmd": []string{"run.go.tmpl"}, "/protos": []string{"service.proto.tmpl"}}, map[string]*assets.File{
	"/cmd": &assets.File{
		Path:     "/cmd",
		FileMode: 0x800001ed,
		Mtime:    time.Unix(1546637710, 1546637710087327919),
		Data:     nil,
	}, "/cmd/run.go.tmpl": &assets.File{
		Path:     "/cmd/run.go.tmpl",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1546568716, 1546568716000000000),
		Data:     []byte(_Grpc5f4232d8066e4368ff87f1202228b4f354cb75b8),
	}, "/protos/service.proto.tmpl": &assets.File{
		Path:     "/protos/service.proto.tmpl",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1546568716, 1546568716000000000),
		Data:     []byte(_Grpc8ab520538275a262d907b67ec7a5db4941054457),
	}, "/register.go.tmpl": &assets.File{
		Path:     "/register.go.tmpl",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1546568716, 1546568716000000000),
		Data:     []byte(_Grpc3c27ca5ff6a68261c9914fe7302b83f4a351481e),
	}, "/run.go.tmpl": &assets.File{
		Path:     "/run.go.tmpl",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1546568716, 1546568716000000000),
		Data:     []byte(_Grpcfc7a55a39318c54096c96e4c27fae2dfa0fff734),
	}, "/": &assets.File{
		Path:     "/",
		FileMode: 0x800001ed,
		Mtime:    time.Unix(1546637796, 1546637796869783915),
		Data:     nil,
	}, "/protos": &assets.File{
		Path:     "/protos",
		FileMode: 0x800001ed,
		Mtime:    time.Unix(1546637719, 1546637719181501858),
		Data:     nil,
	}, "/server_test.go.tmpl": &assets.File{
		Path:     "/server_test.go.tmpl",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1546568716, 1546568716000000000),
		Data:     []byte(_Grpc26e1640f4a9d81e76bb775587829ad76a8820dd5),
	}, "/server.go.tmpl": &assets.File{
		Path:     "/server.go.tmpl",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1546568716, 1546568716000000000),
		Data:     []byte(_Grpc678d6b66ec0a41c76bf1f1c51d736c9ddf327e49),
	}}, "")
